{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT6, False)\nright_drive_smart = Motor(Ports.PORT2, True)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 259.34, 320, 40, MM, 1)\nsideways_motor_a = Motor(Ports.PORT7, False)\nsideways_motor_b = Motor(Ports.PORT10, True)\nsideways = MotorGroup(sideways_motor_a, sideways_motor_b)\ncrane = Motor(Ports.PORT4, False)\nclaw = Motor(Ports.PORT3, False)\nfront_distance = Distance(Ports.PORT1)\nbase_distance = Distance(Ports.PORT5)\n\n\n# Wait for sensor(s) to fully initialize\nwait(100, MSEC)\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n\n# Initialize random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode EXP Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n#Configure side drivetrain\nside_drivetrain = SmartDrive(sideways_motor_a, sideways_motor_b, brain_inertial, 259.34, 320, 40, MM, 1)\ndrivetrain.set_drive_velocity(10, PERCENT)\ncrane.set_max_torque(100, PERCENT)\nside_drivetrain.set_drive_velocity(10, PERCENT)\nclaw.set_max_torque(15, PERCENT)\n\n#Measures in MM\nMAX_VISION_RANGE = 300\n\nDISTANCE_FOR_TOP_LAYER = 185\nDISTANCE_FOR_MIDDLE_LAYER = 190\nDISTANCE_FOR_BOTTOM_LAYER = 167\n\nSIDE_DISTANCE_FOR_TOP_LAYER = -120\nSIDE_DISTANCE_FOR_MIDDLE_LAYER = -85\nSIDE_DISTANCE_FOR_BOTTOM_LAYER = 20\n\ncurrent_pos = Point(0, 0)\n    \ndef drive_forward(distance):\n    if distance >= 0:\n        drivetrain.drive_for(FORWARD, distance, MM)\n    else:\n        drivetrain.drive_for(REVERSE, -distance, MM)\n    # Distance tracking\n    global current_pos\n    current_pos = Point(current_pos.x, current_pos.y + distance)\n\ndef drive_sideward(distance):\n    if distance >= 0:\n        side_drivetrain.drive_for(FORWARD, distance, MM)\n    else:\n        side_drivetrain.drive_for(REVERSE, -distance, MM)\n    # Distance tracking\n    global current_pos\n    current_pos = Point(current_pos.x + distance, current_pos.y)\n\ndef get_cup():\n    # Reverse to not hit the side of any cups\n    drive_forward(-50)\n\n    # Open claw\n    claw.spin(REVERSE)\n\n    # Locate\n    while front_distance.object_distance(MM) > MAX_VISION_RANGE:\n        drive_sideward(18)\n    drive_sideward(36)\n\n    # Drive towards cup (+20 due to sensor inaccuracy)\n    drive_forward(front_distance.object_distance(MM) + 20)\n    wait(0.1, SECONDS)\n\n    # Close claw\n    claw.spin(FORWARD)\n    wait(1, SECONDS)\n\n    # Lift crane\n    crane.spin_to_position(360, DEGREES, wait=True)\n        \ndef drive_to_point(x, y):\n    global current_pos\n    move_side = x - current_pos.x\n    move_forward = y - current_pos.y\n    drive_forward(move_forward)\n    drive_sideward(move_side)\n\ndef place_cup(crane_angle):\n    crane.spin_to_position(crane_angle, DEGREES, wait=True)\n    # Open claw small amount so other cups not hit\n    claw.spin_for(REVERSE, 5, DEGREES)\n    crane.spin_to_position(360, DEGREES, wait=True)\n    \ndef find_placed_cup():\n    while base_distance.object_distance(MM) > MAX_VISION_RANGE:\n        # Small drive amount for greater precision\n        drive_sideward(-5)\n\ndef align():\n    # Re-aligns the robot to original heading if out by more than 1 degree\n    if drivetrain.heading(DEGREES) > 1 and drivetrain.heading(DEGREES) < 359:\n        drivetrain.turn_to_heading(0, DEGREES)\n\n# Cup 1\nget_cup()\nalign()\ndrive_to_point(0, 0)\nalign()\nplace_cup(0)\ndrive_sideward(100)\ncrane.spin_to_position(0, DEGREES, wait=True)\n\n# Subsequent cups follow this method after picking up the cup:\n#   Drive to the right of the stack (drive_to_point)\n#   Scan for the furthest right cup on bottom layer (find_placed_cup)\n#   Drive forward/backward to get the the correct y-coordinate for placement\n#   Drive left to get the the correct x-coordinate for placement\n#   Place the cup\n#   Drive to the right of the stack and drop claw ready to get the next cup\n\n# Cup 2\nget_cup()\nalign()\ndrive_to_point(100, 0)\nalign()\nfind_placed_cup()\ndistance_to_move = base_distance.object_distance(MM) - DISTANCE_FOR_BOTTOM_LAYER\ndrive_forward(distance_to_move)\ndrive_sideward(SIDE_DISTANCE_FOR_BOTTOM_LAYER)\nplace_cup(0)\ndrive_sideward(90)\ncrane.spin_to_position(0, DEGREES, wait=True)\n\n# Push cups together to reduce gaps\ndrive_forward(distance_to_move + 40)\nclaw.set_velocity(10, PERCENT)\nclaw.spin_for(REVERSE, 30, DEGREES)\nclaw.set_velocity(50, PERCENT)\ndrive_sideward(-10)\ndrive_sideward(10)\ndrive_forward(-distance_to_move - 40)\n\n\n# Cup 3 (Top of 1 and 2)\nget_cup()\nalign()\ndrive_to_point(200, 0)\nalign()\nfind_placed_cup()\ndrive_forward(base_distance.object_distance(MM) - DISTANCE_FOR_MIDDLE_LAYER)\ndrive_sideward(SIDE_DISTANCE_FOR_MIDDLE_LAYER)\nplace_cup(180)\n\ndrive_sideward(150)\ncrane.spin_to_position(0, DEGREES, wait=True)\n# Bigger stack\n\n# Cup 4 (Bottom Layer)\nget_cup()\nalign()\ndrive_to_point(200, 0)\nalign()\nfind_placed_cup()\ndistance_to_move = base_distance.object_distance(MM) - DISTANCE_FOR_BOTTOM_LAYER\ndrive_forward(distance_to_move)\ndrive_sideward(SIDE_DISTANCE_FOR_BOTTOM_LAYER)\nplace_cup(0)\ndrive_sideward(84)\ncrane.spin_to_position(0, DEGREES, wait=True)\n\n# Push cups together to reduce gaps\ndrive_forward(distance_to_move + 40)\nclaw.set_velocity(10, PERCENT)\nclaw.spin_for(REVERSE, 30, DEGREES)\nclaw.set_velocity(50, PERCENT)\ndrive_sideward(-10)\ndrive_sideward(10)\ndrive_forward(-distance_to_move - 40)\n\n# Cup 5 (Top of 2 and 4)\nget_cup()\nalign()\ndrive_to_point(300, 0)\nalign()\nfind_placed_cup()\ndrive_forward(base_distance.object_distance(MM) - DISTANCE_FOR_MIDDLE_LAYER)\ndrive_sideward(SIDE_DISTANCE_FOR_MIDDLE_LAYER)\nplace_cup(180)\ndrive_sideward(150)\ncrane.spin_to_position(0, DEGREES, wait=True)\n\n# Cup 6 (Top Layer)\nget_cup()\nalign()\ndrive_to_point(300, 0)\nalign()\nfind_placed_cup()\ndrive_forward(base_distance.object_distance(MM) - DISTANCE_FOR_TOP_LAYER)\ndrive_sideward(SIDE_DISTANCE_FOR_TOP_LAYER)\nplace_cup(300)\n\n# Fully open claw\nclaw.spin(REVERSE)\n\n# Move away from the stack and drop the claw\ndrive_forward(-70)\ncrane.spin_to_position(360, DEGREES, wait=True)\ndrive_forward(-70)\ncrane.spin_to_position(0, DEGREES, wait=True)\nclaw.stop()","textLanguage":"python","robotConfig":[{"port":[6,2,null],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel325in","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[7,10],"name":"sideways","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[4],"name":"crane","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[1],"name":"front_distance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[5],"name":"base_distance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22}],"slot":0,"platform":"EXP","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false}